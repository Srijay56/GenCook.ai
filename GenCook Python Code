import tkinter as tk
from tkinter import Listbox, Text
import pyttsx3
import openai


openai.api_key = "Input OpenAI API Key"

engine = pyttsx3.init()
engine.setProperty('rate', 150)

def speak(text):
    engine.say(text)
    engine.runAndWait()


class CookingAssistant:
    def __init__(self, root):
        self.root = root
        self.root.title("GenCook")


        self.ingredients = []
        self.generated_recipes = []


        tk.Label(root, text="Enter an ingredient:").grid(row=0, column=0, padx=10, pady=5)
        self.ingredient_entry = tk.Entry(root, width=25)
        self.ingredient_entry.grid(row=0, column=1, padx=10, pady=5)


        add_button = tk.Button(root, text="Add Ingredient", command=self.add_ing)
        add_button.grid(row=0, column=2, padx=10, pady=5)


        tk.Label(root, text="Ingredients List:").grid(row=1, column=0, padx=10)
        self.ingredients_listbox = Listbox(root, width=30, height=6)
        self.ingredients_listbox.grid(row=2, column=0, columnspan=2, padx=10, pady=10)


        clear_button = tk.Button(root, text="Clear Ingredients", command=self.clear_ing)
        clear_button.grid(row=3, column=0, pady=10)


        generate_button = tk.Button(root, text="Generate Recipe", command=self.gen_recipe)
        generate_button.grid(row=3, column=1, pady=10)


        tk.Label(root, text="Select a Recipe:").grid(row=4, column=0, padx=10)
        self.recipes_listbox = Listbox(root, width=30, height=6)
        self.recipes_listbox.grid(row=5, column=0, columnspan=2, padx=10, pady=10)


        guide_button = tk.Button(root, text="Show Guide", command=self.show_guide)
        guide_button.grid(row=6, column=1, pady=10)


        tk.Label(root, text="Generated Recipe Details:").grid(row=7, column=0, padx=10)
        self.recipe_textbox = Text(root, wrap="word", width=50, height=10)
        self.recipe_textbox.grid(row=8, column=0, columnspan=3, padx=10, pady=10)

    def add_ing(self):

        ingredient = self.ingredient_entry.get().strip().lower()
        if ingredient and ingredient not in self.ingredients:
            self.ingredients.append(ingredient)
            self.ingredients_listbox.insert(tk.END, ingredient)
            self.ingredient_entry.delete(0, tk.END)  # Clear entry box

    def clear_ing(self):

        self.ingredients = []
        self.ingredients_listbox.delete(0, tk.END)
        self.recipe_textbox.delete(1.0, tk.END)
        speak("Ingredients Cleared Successfully.")

    def gen_recipe(self):
        if self.ingredients:

            ingredients_text = ", ".join(self.ingredients)
            messages = [
                {"role": "system", "content": "You are a helpful cooking assistant."},
                {"role": "user", "content": f"Provide 3 recipe ideas using these ingredients: {ingredients_text}."}
            ]

            try:

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    max_tokens=200,
                    temperature=0.7
                )
                recipes = response['choices'][0]['message']['content'].strip()
                self.generated_recipes = recipes.split("\n")  # Split recipes into separate ideas
                self.recipes_listbox.delete(0, tk.END)  # Clear previous recipes
                for recipe in self.generated_recipes:
                    self.recipes_listbox.insert(tk.END, recipe)  # Display recipes in the listbox


                speak("Here are three recipe ideas for you. Select one.")

            except Exception as e:
                print(f"Error generating recipe: {e}")
                speak("Sorry, there was an error generating the recipe.")
        else:
            speak("Please add ingredients to generate a recipe.")

    def show_guide(self):

        selected_index = self.recipes_listbox.curselection()
        if selected_index:
            selected_recipe = self.generated_recipes[selected_index[0]]
            messages = [
                {"role": "system", "content": "You are a helpful cooking assistant."},
                {"role": "user", "content": f"Provide detailed cooking instructions for this recipe: {selected_recipe}"}
            ]

            try:

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    max_tokens=250,
                    temperature=0.7
                )
                guide = response['choices'][0]['message']['content'].strip()
                self.recipe_textbox.delete(1.0, tk.END)
                self.recipe_textbox.insert(tk.END, guide)
                speak("Here are the instructions to prepare the recipe.")

            except Exception as e:
                print(f"Error generating guide: {e}")
                speak("Sorry, there was a problem generating your guide.")
        else:
            speak("Please select a recipe from the list.")



root = tk.Tk()
app = CookingAssistant(root)
root.mainloop()
